#+title: Doom Emacs Configuration
#+author: Cash Weaver
#+email: cashbweaver@gmail.com

This is my personal Doom Emacs configuration file written in [[https://orgmode.org][=org-mode=]] in literate programming style and based heavily on the work of others[fn:1].

* Table of Contents :TOC_3:noexport:
- [[#introduction][Introduction]]
  - [[#example-of-literate-programming][Example of Literate Programming]]
  - [[#doom-emacs-configuration-files][Doom Emacs Configuration Files]]
  - [[#function-and-variable-names][Function and Variable Names]]
- [[#doom-emacs][Doom Emacs]]
  - [[#configuration-file-headers][Configuration File headers]]
  - [[#modules][Modules]]
- [[#general][General]]
- [[#utility-functions][Utility Functions]]
  - [[#dates][Dates]]
  - [[#key-binding][Key Binding]]
- [[#theme-and-visual][Theme and Visual]]
- [[#packages][Packages]]
  - [[#doct-declarative-org-capture-template][=doct= (Declarative Org Capture Template)]]
    - [[#package][Package]]
    - [[#config][Config]]
  - [[#org2jekyll][=org2jekyll=]]
    - [[#package-1][Package]]
    - [[#config-1][Config]]
  - [[#org-mode][=org-mode=]]
    - [[#general-1][General]]
    - [[#agenda][Agenda]]
    - [[#key-bindings][Key bindings]]
    - [[#task-management][Task Management]]
    - [[#publishing][Publishing]]
- [[#keybindings][Keybindings]]
- [[#include-work-files][Include Work Files]]
  - [[#packages-1][Packages]]
  - [[#config-2][Config]]
- [[#footnotes][Footnotes]]

* Introduction
** Example of Literate Programming

As an example of literate programming with =org-mode=, let's generate a throw-away file, =foo.md=. First, we'll add the title:

#+begin_src md :tangle foo.md
# Foo
#+end_src

Notice that I specified the syntax (=md=) and the file to output the content to (=foo.md=). Next, let's add a list of my favorite colors.

#+begin_src md :tangle foo.md
1. Orange
1. Blue
1. Red
#+end_src

Now we can run =org-babel-tangle= to extract the content of these two blocks and create =foo.md=. The newly generated =foo.md= will contain:

#+begin_src md
# Foo

1. Orange
1. Blue
1. Red
#+end_src
** Doom Emacs Configuration Files

I use this file to generate the three files Doom Emacs expects:

1. =init.el= defines which of the existing Doom [[https://github.com/hlissner/doom-emacs/blob/develop/docs/getting_started.org#modules][modules]] are loaded. A Doom module is a bundle of packages, configuration, and commands which are organized into a unit that can be toggled easily from this file.
1. =packages.el= defines which [[https://github.com/hlissner/doom-emacs/blob/develop/docs/getting_started.org#package-management][packages]] should be installed, beyond those that are installed and loaded as part of the enabled modules.
1. =config.el= contains all [[https://github.com/hlissner/doom-emacs/blob/develop/docs/getting_started.org#configuring-doom][custom configuration]] and code.

Additionally, I generate two extra files which provide some work-specific functionality:

1. =work-packages.el=
1. =work-config.el=

** Function and Variable Names

I prefix all of my own functions and variables with =cashweaver-= to prevent any unintentional overlaps.

#+begin_src emacs-lisp
(setq
 cashweaver-favorite-color "orange")
#+end_src

"Private" functions and variables -- those I wouldn't indend to be accessed directly -- are prefixed with =cashweaver--= (note the two =-='s).

#+begin_src emacs-lisp
(setq
 cashweaver--secret-color "blue")
#+end_src

Additionally, variables and functions which are in a "library"/group are prefixed with either =cashweaver-<library name>-= or =cashwever-<library name>--=, depending on their intended visibility.

#+begin_src emacs-lisp
(setq
 cashweaver-colors-favorite "orange"
 cashweaver-colors--secret "blue")
#+end_src
* Doom Emacs
** Configuration File headers

There is some boilerplate which is present in the configuration files when you first create them using =doom install= which I like to preserve.

#+HTMl: <details><summary>init.el</summary>
#+begin_src emacs-lisp :tangle init.el
;;; init.el -*- lexical-binding: t; -*-

;; DO NOT EDIT THIS FILE MANUALLY.
;; This file is generated from doom.md. You should make your changes there and
;; this file using org-babel-tangle.

;; This file controls what Doom modules are enabled and what order they load
;; in. Remember to run 'doom sync' after modifying it!

;; NOTE Press 'SPC h d h' (or 'C-h d h' for non-vim users) to access Doom's
;;      documentation. There you'll find a "Module Index" link where you'll find
;;      a comprehensive list of Doom's modules and what flags they support.

;; NOTE Move your cursor over a module's name (or its flags) and press 'K' (or
;;      'C-c c k' for non-vim users) to view its documentation. This works on
;;      flags as well (those symbols that start with a plus).
;;
;;      Alternatively, press 'gd' (or 'C-c c d') on a module to browse its
;;      directory (for easy access to its source code).
#+end_src
#+HTMl: </details>

#+HTMl: <details><summary>packages.el</summary>
#+begin_src emacs-lisp :tangle packages.el
;; -*- no-byte-compile: t; -*-
;;; $DOOMDIR/packages.el

;; DO NOT EDIT THIS FILE MANUALLY.
;; This file is generated from doom.md. You should make your changes there and
;; this file using org-babel-tangle.

;; To install a package with Doom you must declare them here and run 'doom sync'
;; on the command line, then restart Emacs for the changes to take effect -- or
;; use 'M-x doom/reload'.


;; To install SOME-PACKAGE from MELPA, ELPA or emacsmirror:
;(package! some-package)

;; To install a package directly from a remote git repo, you must specify a
;; `:recipe'. You'll find documentation on what `:recipe' accepts here:
;; https://github.com/raxod502/straight.el#the-recipe-format
;(package! another-package
;  :recipe (:host github :repo "username/repo"))

;; If the package you are trying to install does not contain a PACKAGENAME.el
;; file, or is located in a subdirectory of the repo, you'll need to specify
;; `:files' in the `:recipe':
;(package! this-package
;  :recipe (:host github :repo "username/repo"
;           :files ("some-file.el" "src/lisp/*.el")))

;; If you'd like to disable a package included with Doom, you can do so here
;; with the `:disable' property:
;(package! builtin-package :disable t)

;; You can override the recipe of a built in package without having to specify
;; all the properties for `:recipe'. These will inherit the rest of its recipe
;; from Doom or MELPA/ELPA/Emacsmirror:
;(package! builtin-package :recipe (:nonrecursive t))
;(package! builtin-package-2 :recipe (:repo "myfork/package"))

;; Specify a `:branch' to install a package from a particular branch or tag.
;; This is required for some packages whose default branch isn't 'master' (which
;; our package manager can't deal with; see raxod502/straight.el#279)
;(package! builtin-package :recipe (:branch "develop"))

;; Use `:pin' to specify a particular commit to install.
;(package! builtin-package :pin "1a2b3c4d5e")


;; Doom's packages are pinned to a specific commit and updated from release to
;; release. The `unpin!' macro allows you to unpin single packages...
;(unpin! pinned-package)
;; ...or multiple packages
;(unpin! pinned-package another-pinned-package)
;; ...Or *all* packages (NOT RECOMMENDED; will likely break things)
;(unpin! t)
#+end_src
#+HTMl: </details>

#+HTMl: <details><summary>config.el</summary>
#+begin_src emacs-lisp :tangle config.el
;;; $DOOMDIR/config.el -*- lexical-binding: t; -*-

;; DO NOT EDIT THIS FILE MANUALLY.
;; This file is generated from doom.md. You should make your changes there and
;; this file using org-babel-tangle.

;; Place your private configuration here! Remember, you do not need to run 'doom
;; sync' after modifying this file!


;; Some functionality uses this to identify you, e.g. GPG configuration, email
;; clients, file templates and snippets.
; (setq user-full-name "John Doe"
;       user-mail-address "john@doe.com")

;; Doom exposes five (optional) variables for controlling fonts in Doom. Here
;; are the three important ones:
;;
;; + `doom-font'
;; + `doom-variable-pitch-font'
;; + `doom-big-font' -- used for `doom-big-font-mode'; use this for
;;   presentations or streaming.
;;
;; They all accept either a font-spec, font string ("Input Mono-12"), or xlfd
;; font string. You generally only need these two:
;; (setq doom-font (font-spec :family "monospace" :size 12 :weight 'semi-light)
;;       doom-variable-pitch-font (font-spec :family "sans" :size 13))

;; There are two ways to load a theme. Both assume the theme is installed and
;; available. You can either set `doom-theme' or manually load a theme with the
;; `load-theme' function. This is the default:
; (setq doom-theme 'doom-one)

;; If you use `org' and don't want your org files in the default location below,
;; change `org-directory'. It must be set before org loads!
; (setq org-directory "~/org/")

;; This determines the style of line numbers in effect. If set to `nil', line
;; numbers are disabled. For relative line numbers, set this to `relative'.
; (setq display-line-numbers-type t)


;; Here are some additional functions/macros that could help you configure Doom:
;;
;; - `load!' for loading external *.el files relative to this one
;; - `use-package!' for configuring packages
;; - `after!' for running code after a package has loaded
;; - `add-load-path!' for adding directories to the `load-path', relative to
;;   this file. Emacs searches the `load-path' when you load packages with
;;   `require' or `use-package'.
;; - `map!' for binding new keys
;;
;; To get information about any of these functions/macros, move the cursor over
;; the highlighted symbol at press 'K' (non-evil users must press 'C-c c k').
;; This will open documentation for it, including demos of how they are used.
;;
;; You can also try 'gd' (or 'C-c c d') to jump to their definition and see how
;; they are implemented.
#+end_src
#+HTMl: </details>
** Modules

Let's start off with the modules as it's much easier to specify them all at once rather than attempt to do so piecemeal over the course of this document.

#+begin_src emacs-lisp :tangle init.el
(doom! :input
       ;;chinese
       ;;japanese
       ;;layout            ; auie,ctsrnm is the superior home row

       :completion
       company             ; the ultimate code completion backend
       ;;helm              ; the *other* search engine for love and life
       ;;ido               ; the other *other* search engine...
       ivy                 ; a search engine for love and life

       :ui
       ;;deft              ; notational velocity for Emacs
       doom                ; what makes DOOM look the way it does
       doom-dashboard      ; a nifty splash screen for Emacs
       doom-quit           ; DOOM quit-message prompts when you quit Emacs
       (emoji              ; 🙂
        +ascii
        +github
        +unicode)
       ;;fill-column       ; a `fill-column' indicator
       hl-todo             ; highlight TODO/FIXME/NOTE/DEPRECATED/HACK/REVIEW
       ;;hydra
       ;;indent-guides     ; highlighted indent columns
       ;;ligatures         ; ligatures and symbols to make your code pretty again
       ;;minimap           ; show a map of the code on the side
       modeline            ; snazzy, Atom-inspired modeline, plus API
       ;;nav-flash         ; blink cursor line after big motions
       ;;neotree           ; a project drawer, like NERDTree for vim
       ophints             ; highlight the region an operation acts on
       (popup +defaults)   ; tame sudden yet inevitable temporary windows
       ;;tabs              ; a tab bar for Emacs
       ;;treemacs          ; a project drawer, like neotree but cooler
       unicode             ; extended unicode support for various languages
       vc-gutter          ; vcs diff in the fringe
       vi-tilde-fringe     ; fringe tildes to mark beyond EOB
       ;;window-select     ; visually switch windows
       workspaces          ; tab emulation, persistence & separate workspaces
       ;;zen               ; distraction-free coding or writing

       :editor
       (evil +everywhere)  ; come to the dark side, we have cookies
       file-templates      ; auto-snippets for empty files
       fold                ; (nigh) universal code folding
       ;;(format +onsave)  ; automated prettiness
       ;;god               ; run Emacs commands without modifier keys
       ;;lispy             ; vim for lisp, for people who don't like vim
       ;;multiple-cursors  ; editing in many places at once
       ;;objed             ; text object editing for the innocent
       ;;parinfer          ; turn lisp into python, sort of
       ;;rotate-text       ; cycle region at point between text candidates
       snippets            ; my elves. They type so I don't have to
       ;;word-wrap         ; soft wrapping with language-aware indent

       :emacs
       dired               ; making dired pretty [functional]
       electric            ; smarter, keyword-based electric-indent
       ;;ibuffer           ; interactive buffer management
       undo                ; persistent, smarter undo for your inevitable mistakes
       vc                  ; version-control and Emacs, sitting in a tree

       :term
       ;;eshell            ; the elisp shell that works everywhere
       ;;shell             ; simple shell REPL for Emacs
       ;;term              ; basic terminal emulator for Emacs
       vterm               ; the best terminal emulation in Emacs

       :checkers
       syntax              ; tasing you for every semicolon you forget
       ;;spell             ; tasing you for misspelling mispelling
       ;;grammar           ; tasing grammar mistake every you make

       :tools
       ;;ansible
       ;;debugger          ; FIXME stepping through code, to help you add bugs
       ;;direnv
       ;;docker
       ;;editorconfig      ; let someone else argue about tabs vs spaces
       ;;ein               ; tame Jupyter notebooks with emacs
       (eval +overlay)     ; run code, run (also, repls)
       ;;gist              ; interacting with github gists
       lookup              ; navigate your code and its documentation
       ;;lsp
       magit               ; a git porcelain for Emacs
       ;;make              ; run make tasks from Emacs
       ;;pass              ; password manager for nerds
       ;;pdf               ; pdf enhancements
       ;;prodigy           ; FIXME managing external services & code builders
       ;;rgb               ; creating color strings
       ;;taskrunner        ; taskrunner for all your projects
       ;;terraform         ; infrastructure as code
       ;;tmux              ; an API for interacting with tmux
       ;;upload            ; map local to remote projects via ssh/ftp

       :os
       (:if IS-MAC macos)  ; improve compatibility with macOS
       ;;tty               ; improve the terminal Emacs experience

       :lang
       ;;agda              ; types of types of types of types...
       ;;cc                ; C/C++/Obj-C madness
       ;;clojure           ; java with a lisp
       ;;common-lisp       ; if you've seen one lisp, you've seen them all
       ;;coq               ; proofs-as-programs
       ;;crystal           ; ruby at the speed of c
       ;;csharp            ; unity, .NET, and mono shenanigans
       ;;data              ; config/data formats
       ;;(dart +flutter)   ; paint ui and not much else
       ;;elixir            ; erlang done right
       ;;elm               ; care for a cup of TEA?
       emacs-lisp          ; drown in parentheses
       ;;erlang            ; an elegant language for a more civilized age
       ;;ess               ; emacs speaks statistics
       ;;faust             ; dsp, but you get to keep your soul
       ;;fsharp            ; ML stands for Microsoft's Language
       ;;fstar             ; (dependent) types and (monadic) effects and Z3
       ;;gdscript          ; the language you waited for
       ;;(go +lsp)         ; the hipster dialect
       ;;(haskell +dante)  ; a language that's lazier than I am
       ;;hy                ; readability of scheme w/ speed of python
       ;;idris             ; a language you can depend on
       ;;json              ; At least it ain't XML
       java                ; the poster child for carpal tunnel syndrome
       javascript          ; all(hope(abandon(ye(who(enter(here))))))
       ;;julia             ; a better, faster MATLAB
       ;;kotlin            ; a better, slicker Java(Script)
       ;;latex             ; writing papers in Emacs has never been so fun
       ;;lean
       ;;factor
       ;;ledger            ; an accounting system in Emacs
       ;;lua               ; one-based indices? one-based indices
       markdown            ; writing docs for people to ignore
       ;;nim               ; python + lisp at the speed of c
       ;;nix               ; I hereby declare "nix geht mehr!"
       ;;ocaml             ; an objective camel
       (org                ; organize your plain life in plain text
        +pandock
        +pomodoro)
       ;;php               ; perl's insecure younger brother
       ;;plantuml          ; diagrams for confusing people more
       ;;purescript        ; javascript, but functional
       python              ; beautiful is better than ugly
       ;;qt                ; the 'cutest' gui framework ever
       ;;racket            ; a DSL for DSLs
       ;;raku              ; the artist formerly known as perl6
       ;;rest              ; Emacs as a REST client
       ;;rst               ; ReST in peace
       ;;(ruby +rails)     ; 1.step {|i| p "Ruby is #{i.even? ? 'love' : 'life'}"}
       ;;rust              ; Fe2O3.unwrap().unwrap().unwrap().unwrap()
       ;;scala             ; java, but good
       ;;scheme            ; a fully conniving family of lisps
       sh                  ; she sells {ba,z,fi}sh shells on the C xor
       ;;sml
       ;;solidity          ; do you need a blockchain? No.
       ;;swift             ; who asked for emoji variables?
       ;;terra             ; Earth and Moon in alignment for performance.
       ;;web               ; the tubes
       yaml                ; JSON, but readable

       :email
       ;;(mu4e +gmail)
       notmuch
       ;;(wanderlust +gmail)

       :app
       ;;calendar
       ;;irc               ; how neckbeards socialize
       ;;(rss +org)        ; emacs as an RSS reader
       ;;twitter           ; twitter client https://twitter.com/vnought

       :config
       ;;literate
       (default +bindings +smartparens))
#+end_src

* General

Use YYYY-MM-DD date format.

#+begin_src emacs-lisp :tangle config.el
(setq
 calendar-date-style 'iso)
#+end_src

* Utility Functions

General-purpose functions which are used throughout my config.

** Dates

#+begin_src emacs-lisp :tangle config.el

(defun cashweaver-get-date (&optional date-format offset-days)
  "Return the (offset) date in format."
  (interactive)
  (let ((date-format (or date-format "%Y-%m-%d"))
        (offset-days (or offset-days 0)))
    (shell-command-to-string
     (format "echo -n $(date \"+%s\" --date=\"%d days\")" date-format offset-days))))

(defun cashweaver-todays-date ()
  "Return todays date as YYYY-MM-DD."
  (cashweaver-get-date
   ; date-format
   "%Y-%m-%d"
   ; offset-days
   0))

(defun cashweaver-yesterdays-date ()
  "Return todays date as YYYY-MM-DD."
  (cashweaver-get-date
   ; date-format
   "%Y-%m-%d"
   ; offset-days
   -1))

(cashweaver-todays-date)
#+end_src

** Key Binding

#+begin_src emacs-lisp :tangle config.el
; Reference; https://www.emacswiki.org/emacs/DocumentingKeyBindingToLambda
(defun evil-lambda-key (mode keymap key def)
  "Wrap `evil-define-key' to provide documentation."
  (set 'sym (make-symbol (documentation def)))
  (fset sym def)
  (evil-define-key mode keymap key sym))
#+end_src

* Theme and Visual
#+begin_src emacs-lisp :tangle config.el
(setq
 doom-theme 'doom-tomorrow-night)
#+end_src

#+begin_src emacs-lisp :tangle config.el
(setq
 show-trailing-whitespace t)
#+end_src

* Packages
** =doct= ([[https://github.com/progfolio/doct][Declarative Org Capture Template]])
*** Package
#+begin_src emacs-lisp :tangle packages.el
(package! doct)
#+end_src
*** Config

#+begin_src emacs-lisp :tangle config.el
(use-package! doct
  :commands (doct))
#+end_src
** =org2jekyll=
*** Package

#+begin_src emacs-lisp :tangle packages.el
(package! org2jekyll)
#+end_src

*** Config

#+begin_src emacs-lisp :tangle config.el
(use-package! org2jekyll)
#+end_src
** =org-mode=
*** General

#+begin_src emacs-lisp :tangle config.el
(after! org
  (setq
   org-ellipsis " ▾ "
   org-log-done 'time
   ; Start the org agenda mini-calendar on Monday.
   calendar-week-start-day 1
   org-hide-leading-stars t))
#+end_src

Specify custom todo keywords.

#+begin_src emacs-lisp :tangle config.el
(after! org
  (setq
   org-todo-keywords
   '((sequence
      ; A task that needs doing & is ready to do
      "TODO(t)"
      ; A project, which usually contains other tasks
      "PROJ(p)"
      ; A task that is in progress
      "INPROGRESS(i)"
      ; Something external is holding up this task
      "BLOCKED(b)"
      ; This task is paused/on hold because of me
      "HOLD(h)"
      "|"
      ; Task successfully completed
      "DONE(d)"
      ; Task was moved
      "MOVE(m)"
      ; Task was cancelled, aborted or is no longer applicable
      "KILL(k)")
     (sequence
      ; A task that needs doing
      "[ ](T)"
      ; Task is in progress
      "[-](S)"
      ; Task is being held up or paused
      "[?](W)"
      "|"
      ; Task was completed
      "[X](D)"))
   org-todo-keyword-faces
   '(("[-]"  . +org-todo-active)
     ("INPROGRESS" . +org-todo-active)
     ("[?]"  . +org-todo-onhold)
     ("BLKD" . +org-todo-onhold)
     ("HOLD" . +org-todo-onhold)
     ("PROJ" . +org-todo-project))))
#+end_src

*** Agenda

#+begin_src emacs-lisp :tangle config.el
(after! org-agenda
  (setq
   org-agenda-skip-scheduled-if-deadline-is-shown t
   org-agenda-skip-scheduled-if-done t
   org-agenda-skip-scheduled-if-done t
   org-agenda-skip-deadline-if-done t
   org-agenda-include-deadlines t
   org-agenda-block-separator nil
   org-agenda-compact-blocks t
   org-agenda-start-day nil ;; i.e. today
   org-agenda-span 1
   org-agenda-start-on-weekday nil))
#+end_src

*** Key bindings

#+begin_src emacs-lisp :tangle config.el
(after! org
  (map!
   :map org-mode-map
   :localleader
   :desc "structure templates" :n "S" #'org-insert-structure-template
   (:prefix ("C" . "code")
     (:prefix ("e" . "execute")
      :desc "block" :n "b" #'org-babel-execute-src-block))))
#+end_src

*** Task Management

#+begin_src emacs-lisp :tangle config.el
(defun cashweaver-org--archive-when-done ()
  "Archive entry when it is marked as done (as defined by `org-done-keywords')."
  (when (org-entry-is-done-p)
    (unless (org-get-repeat)
      (org-archive-subtree-default))))

(add-hook! 'org-after-todo-state-change-hook
           'cashweaver-org--archive-when-done)
#+end_src

#+RESULTS:
| cashweaver-org--archive-when-done |
*** Publishing

#+begin_src emacs-lisp :tangle config.el
;(setq
 ;cashweaver--blog-post-directory
 ;org-publish-project-alist
 ;'(("blog-post"
    ;:base-directory )))
#+end_src
* Keybindings

#+begin_src emacs-lisp :tangle work-config.el
;; Keep in alphabetical order.
(map!
 (:leader
  ;; h
  :desc "at point" :n "h h" #'helpful-at-point))
#+end_src

#+RESULTS:
: helpful-at-point

* Include Work Files
** Packages

#+begin_src emacs-lisp :tangle packages.el
(defun is-work-p ()
  "Return true if executed on my work machine."
  (file-directory-p "/home/google"))
(if (is-work-p)
    (load "work-packages.el"))
#+end_src

** Config

#+begin_src emacs-lisp :tangle config.el
(defun is-work-p ()
  "Return true if executed on my work machine."
  (file-directory-p "/home/google"))
(if (is-work-p)
    (load "work-config.el"))
#+end_src

* Footnotes

[fn:1] 1. [[https://github.com/zzamboni/dot-doom/blob/master/doom.org][Diego Zamboni]]
